<?php
/*
	@! AuthManager v3.0
	@@ User authentication and management web application
-----------------------------------------------------------------------------	
	** author: StitchApps
	** website: http://www.stitchapps.com
	** email: support@stitchapps.com
	** phone support: +91 9871084893
-----------------------------------------------------------------------------
	@@package: am_authmanager3.0
*/

/*
error logging class for the application. all the errors generated by the application are stored in .txt files in the "logs" folder under the "modules" folder.
*/
class KLogger {
	const EMERG  = 0;
    const ALERT  = 1;
    const CRIT   = 2;
    const ERR    = 3;
    const WARN   = 4;
    const NOTICE = 5;
    const INFO   = 6;
    const DEBUG  = 7;
    const OFF    = 8;
    const FATAL  = 2;
    const STATUS_LOG_OPEN    = 1;
    const STATUS_OPEN_FAILED = 2;
    const STATUS_LOG_CLOSED  = 3;
    private $_logStatus         = self::STATUS_LOG_CLOSED;
    private $_messageQueue      = array();
    private $_logFilePath       = null;
    private $_severityThreshold = self::INFO;
    private $_fileHandle        = null;
    private $_messages = array(
        'writefail'   => 'The file could not be written to. Check that appropriate permissions have been set.',
        'opensuccess' => 'The log file was opened successfully.',
        'openfail'    => 'The file could not be opened. Check permissions.',
    );

	private static $_defaultSeverity    = self::DEBUG;
    private static $_dateFormat         = 'Y-m-d G:i:s';
    private static $_defaultPermissions = 0777;
    private static $instances           = array();

    public static function instance($logDirectory = false, $severity = false) {
        if($severity === false) {
            $severity = self::$_defaultSeverity;
        }
        
        if($logDirectory === false) {
            if(count(self::$instances) > 0) {
                return current(self::$instances);
            } else {
                $logDirectory = dirname(__FILE__);
            }
        }

        if(in_array($logDirectory, self::$instances)) {
            return self::$instances[$logDirectory];
        }

        self::$instances[$logDirectory] = new self($logDirectory, $severity);
        return self::$instances[$logDirectory];
    }

    public function __construct($logDirectory, $severity) {
        $logDirectory = rtrim($logDirectory, '\\/');

        if($severity === self::OFF) {
            return;
        }

        $this->_logFilePath = $logDirectory
            . DIRECTORY_SEPARATOR
            . 'log_'
            . date('Y-m-d')
            . '.txt';

        $this->_severityThreshold = $severity;
        if(!file_exists($logDirectory)) {
            mkdir($logDirectory, self::$_defaultPermissions, true);
        }

        if(file_exists($this->_logFilePath) && !is_writable($this->_logFilePath)) {
            $this->_logStatus = self::STATUS_OPEN_FAILED;
            $this->_messageQueue[] = $this->_messages['writefail'];
            return;
        }

        if(($this->_fileHandle = fopen($this->_logFilePath, 'a'))) {
            $this->_logStatus = self::STATUS_LOG_OPEN;
            $this->_messageQueue[] = $this->_messages['opensuccess'];
        } else {
            $this->_logStatus = self::STATUS_OPEN_FAILED;
            $this->_messageQueue[] = $this->_messages['openfail'];
        }
    }

    public function __destruct() {
        if($this->_fileHandle) {
            fclose($this->_fileHandle);
        }
    }

    public function logDebug($line) {
        $this->log($line, self::DEBUG);
    }

    public function getMessage() {
        return array_pop($this->_messageQueue);
    }

    public function getMessages() {
        return $this->_messageQueue;
    }

	public function clearMessages() {
        $this->_messageQueue = array();
    }

    public static function setDateFormat($dateFormat) {
        self::$_dateFormat = $dateFormat;
    }

    public function logInfo($line) {
        $this->log($line, self::INFO);
    }

    public function logNotice($line) {
        $this->log($line, self::NOTICE);
    }

    public function logWarn($line) {
        $this->log($line, self::WARN);
    }

    public function logError($line) {
        $this->log($line, self::ERR);
    }

    public function logFatal($line) {
        $this->log($line, self::FATAL);
    }

    public function logAlert($line) {
        $this->log($line, self::ALERT);
    }

    public function logCrit($line) {
        $this->log($line, self::CRIT);
    }

    public function logEmerg($line) {
        $this->log($line, self::EMERG);
    }

    public function log($line, $severity) {
        if($this->_severityThreshold >= $severity) {
            $status = $this->_getTimeLine($severity);
            $this->writeFreeFormLine("$status $line \n");
        }
    }

    public function writeFreeFormLine($line) {
        if($this->_logStatus == self::STATUS_LOG_OPEN
            && $this->_severityThreshold != self::OFF) {
            if(fwrite($this->_fileHandle, $line) === false) {
                $this->_messageQueue[] = $this->_messages['writefail'];
            }
        }
    }

    private function _getTimeLine($level)
    {
        $time = date(self::$_dateFormat);

        switch($level) {
            case self::EMERG:
                return "$time - EMERG -->";
            case self::ALERT:
                return "$time - ALERT -->";
            case self::CRIT:
                return "$time - CRIT -->";
            case self::FATAL:
                return "$time - FATAL -->";
            case self::NOTICE:
                return "$time - NOTICE -->";
            case self::INFO:
                return "$time - INFO -->";
            case self::WARN:
                return "$time - WARN -->";
            case self::DEBUG:
                return "$time - DEBUG -->";
            case self::ERR:
                return "$time - ERROR -->";
            default:
                return "$time - LOG -->";
        }
    }
}
?>